import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.Timer;

public class PacManUpdate extends JPanel implements ActionListener, KeyListener{

	double x = 600, y = 600;
	int oldDirection = 0, newDirection = 0, currentCellX = 10, currentCellY = 12, score = 0, strong = 0;
	ArrayList<ArrayList<PacManCell>> map = new ArrayList<>();
	Timer t = new Timer(1, this);
	private Image dbImage;
	private Graphics dbg;
	
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		movement(newDirection);
		//repaint();
	}
	
	public void movement(int direction) {
		switch(direction) {
		
		
		case 0: 				//Case for Right Movement
			if(!map.get(currentCellY).get(currentCellX + 1).isWall()) {		//Check if new spot is a wall
				for(int i = 0; i < 50; i++) {
					move(0);		//Move pacman toawrd cell 20 times
					paintImmediately((int)(x - 50),(int)(y - 50),  200,  200);
					
				}
				if(x % 50 == 0) currentCellX += 1;
				eaten();
			}
			else {
				newDirection = oldDirection;
			}
			break;
		
		case 1: 				//Case for Left Movement
			if(!map.get(currentCellY).get(currentCellX - 1).isWall()) {		//Check if new spot is a wall
				for(int i = 0; i < 50; i++) {
					move(1);		//Move pacman toawrd cell 20 times
					paintImmediately((int)(x - 50),(int)(y - 50),  200,  200);
				}
				currentCellX -= 1;
				eaten();
			
			}
			else {
				newDirection = oldDirection;
			}
			break;
		
		case 2: 				//Case for Up Movement
			if(!map.get(currentCellY - 1).get(currentCellX).isWall()) {		//Check if new spot is a wall
				for(int i = 0; i < 50; i++) {
					move(2);		//Move pacman toawrd cell 20 times
					paintImmediately((int)(x - 50),(int)(y - 50),  200,  200);
				}
				currentCellY -= 1;
				eaten();

			}
			else {
				newDirection = oldDirection;
			}
			break;
		
		case 3: 				//Case for Down Movement
			if(!map.get(currentCellY + 1).get(currentCellX).isWall()) {		//Check if new spot is a wall
				for(int i = 0; i < 50; i++) {
					move(3);		//Move pacman toawrd cell 20 times
					paintImmediately((int)(x - 50),(int)(y - 50),  200,  200);
					
				}
				currentCellY += 1;
				eaten();
				
			}
			else {
				newDirection = oldDirection;
			}
			break;
		}
		if(newDirection != oldDirection) oldDirection = newDirection;
	}
	
	public void move(int direct) {
		switch(direct) {
			case 0: x += 1;
				break;
			case 1: x -= 1;
				break;
			case 2: y -= 1;
				break;
			case 3: y += 1;
				break;
			
		}
	}
	
	public void eaten() {
		if(map.get(currentCellY).get(currentCellX).isDot()) {	//If new cell is dot then add to score
			score += 10;
			map.get(currentCellY).get(currentCellX).noDot();
			paintImmediately(10, 150, 300, 300);
			
		}
		if(map.get(currentCellY).get(currentCellX).isPowerUp()) {		//If the cell is a powerUp then strengthen pacman
			strong++;
			map.get(currentCellY).get(currentCellX).setPowerUp(false);
			paintImmediately((int)(x - 50),(int)(y - 50), 200, 200);
		}
	}
	
	public void paintComponent(Graphics g) {
		
		Graphics2D g2 = (Graphics2D) g;
		
		super.paintComponent(g2);
		
		//Background
		g2.setColor(Color.BLACK);
		g2.fill(new Rectangle2D.Double(0, 0, 1200, 1000));
		
		//PACMAN
		Ellipse2D.Double pacman = new Ellipse2D.Double(x, y, 45, 45);
		if((strong % 1000) == 0) {			//If no Powerup then yellow pacman

			g2.setColor(Color.YELLOW);
			
		}
		else if(((strong % 250) <= 15) || (((strong % 1000) > 750) && ((strong % 50) <= 30))) {		//If Powerup almost ran out start to blink
			
			g2.setColor(Color.YELLOW);
			strong++;
			
		}
		else {								//If Powered up then green pacman
			g2.setColor(Color.GREEN);
			strong++;
		}
			
		g2.fill(pacman);
		
		//FOOD
		g2.setColor(Color.WHITE);
		for(int i = 0; i < 20; i++) {
			for(int j = 0; j < 20; j++) {
									
				if(map.get(i).get(j).isDot()) {
							
							
					Ellipse2D.Double food = new Ellipse2D.Double(map.get(i).get(j).getCenterX() - 7.5 + 100, map.get(i).get(j).getCenterY() - 7.5, 15, 15);	//Make the small dots
					g2.fill(food);
							
				}
				else if(map.get(i).get(j).isPowerUp()) {
							
					Ellipse2D.Double food = new Ellipse2D.Double(map.get(i).get(j).getCenterX() - 12.5 + 100, map.get(i).get(j).getCenterY() - 12.5, 25, 25);	//Make the big dots
					g2.fill(food);
							
				}
						
			}
			
		}
		
		//WALLS
		g2.setColor(Color.blue);
	      
	    g2.draw(new Rectangle2D.Double(500, 450, 200, 100));
	      
	    Rectangle2D.Double r1 = new Rectangle2D.Double(490, 440, 220, 120);
	    g2.draw(r1);
	    RoundRectangle2D.Double r2 = new RoundRectangle2D.Double(490, 610, 220, 25, 25, 25);
	    g2.draw(r2);
	    g2.drawLine(575, 450, 575, 440);
	    g2.drawLine(625, 450, 625, 440);
	    
	    	    
	    
	    //TEXT
	    Font currentFont = g.getFont();
	    Font newFont = currentFont.deriveFont(currentFont.getSize() * 3F);
	    g.setFont(newFont);
	    g2.drawString("Player 1", 10, 100);
	    g2.drawString("Score:", 25, 150);
	    g2.drawString(Integer.toString(score), 40, 200);
	    
	    g2.drawString("LIVES:", 20, 800);
	    int numLives = 3;
		g2.drawString(Integer.toString(numLives), 60, 850);

		
	}
	
	public void paint(Graphics g) {
		
		dbImage = createImage(getWidth(), getHeight());
		dbg = dbImage.getGraphics();
		paintComponent(dbg);
		g.drawImage( dbImage, 0, 0, this); 
	   
	}
	
	public void keyPressed(KeyEvent e) {
	    int code = e.getKeyCode();
	    if(code == KeyEvent.VK_UP){
	    	if(oldDirection != newDirection) oldDirection = newDirection;
	    	newDirection = 2;
	    }
	    if(code == KeyEvent.VK_DOWN){
	    	
	    	if(oldDirection != newDirection) oldDirection = newDirection;
	    	newDirection = 3;
	       
	    }
	    if(code == KeyEvent.VK_RIGHT){
	    	if(oldDirection != newDirection) oldDirection = newDirection;
	    	newDirection = 0;
	    }
	    if(code == KeyEvent.VK_LEFT){
	    	if(oldDirection != newDirection) oldDirection = newDirection;
	    	newDirection = 1;
	    }
	}
		   
	
	public PacManUpdate() {
		
		t.start();
		addKeyListener(this);
	    setFocusable(true);
	    setFocusTraversalKeysEnabled(false);
	    for(int i = 0; i < 21; i++) {
			
			map.add(new ArrayList<PacManCell>());
						
		}
		
		for(int i = 0; i < 20; i++) {
			for(int j = 0; j < 20; j++) {
				
				map.get(i).add(new PacManCell(j * 50, i * 50));		//Initiallize the Cells
				if(i == 19 || j == 19 || j == 0 || i == 0) {
					map.get(i).get(j).setWall();
				}
			
			}
			
		}
		
		map.get(9).get(8).setWall();		//WALL
		map.get(9).get(9).setWall();		//WALL
		map.get(9).get(10).setWall();		//WALL
		map.get(9).get(11).setWall();		//WALL
		map.get(10).get(8).setWall();		//WALL
		map.get(10).get(9).setWall();		//WALL
		map.get(10).get(10).setWall();		//WALL
		map.get(10).get(11).setWall();		//WALL
		
		map.get(12).get(8).setWall();		//WALL
		map.get(12).get(9).setWall();		//WALL
		map.get(12).get(10).setWall();		//WALL
		map.get(12).get(11).setWall();		//WALL
		
		map.get(1).get(1).setPowerUp(true);		//PowerUp
		map.get(18).get(1).setPowerUp(true);	//PowerUp
		map.get(1).get(18).setPowerUp(true);	//PowerUp
		map.get(18).get(18).setPowerUp(true);	//PowerUp

	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	

}
