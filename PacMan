import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.Timer;

public class PacManUpdate extends JPanel implements ActionListener, KeyListener{

	double x = 600, y = 550, gx = 600, gy = 450;
	double[] level = {2.5, 2.5, 2.5, 2.0};
	double[] levels = {2.5, 2.5, 2, 1};
	int oldDirection = 0, newDirection = 0, currentCellX = 1, currentCellY = 5, score = 0, strong = 0, newDirectionG = 0, oldDirectionG = 0;
	int currentCellXG = 1, currentCellYG = 1, currentDirection = 0, currentDirectionG = 0, count = 0, numLives = 2, lvl = 0, game = 0, player1 = 0, winner = -1;
	ArrayList<ArrayList<PacManCell>> map = new ArrayList<>();
	ArrayList<Integer> arrDotX = new ArrayList<>();
	ArrayList<Integer> arrDotY = new ArrayList<>();
	Timer t = new Timer(1, this);
	private Image dbImage;
	private Graphics dbg;
	
	public void actionPerformed(ActionEvent arg0) {
		
		movementG(newDirectionG);
		movement(newDirection);
		
		endgame();
		
		repaint();
		
	}
	
	public void endgame() {
		
		if(currentCellX == currentCellXG && currentCellY == currentCellYG) {
			
			if(strong % (1000 - (150 * lvl)) != 0) {		//If pac is powered then eat ghost
				gx = 600;
				gy = 450;
				currentCellXG = 10;
				currentCellYG = 9;
				score += 400;
			}
			else if(game == 1 && numLives == 1){
				oldDirection = 4;
				oldDirectionG = 4;
				move(4);
				moveG(4);
				if(score > player1) winner = 2;
				if(player1 > score) winner = 1;
				if(score == player1) winner = 0;
				repaint();
				t.stop();
			}
			else {
				oldDirection = 4;
				oldDirectionG = 4;
				move(4);
				x = 600;
				y = 550;
				currentCellX = 10;
				currentCellY = 11;
				numLives--;
				if(numLives == 0 && game == 0) {
				
					gx = 600;
					gy = 450;
					currentCellXG = 10;
					currentCellYG = 9;
					player1 = score;
					score = 0;
					numLives = 2;
					for(int i = 0; i < arrDotX.size(); i++) {
						
						map.get(arrDotY.get(i)).get(arrDotX.get(i)).setDot();
						
					}	
					map.get(1).get(1).setPowerUp(true);		//PowerUp
					map.get(17).get(1).setPowerUp(true);	//PowerUp
					map.get(1).get(19).setPowerUp(true);	//PowerUp
					map.get(17).get(19).setPowerUp(true);	//PowerUp
					game++;
				}
			}
		}
		else {
			
			int numDots = 0;
			for(int i = 0; i < map.size(); i++) {
				for(int j = 0; j < map.get(i).size(); j++) {
					if(map.get(i).get(j).isDot()) numDots++;
				}
			}
			if(numDots == 0) {
				
				oldDirection = 4;
				oldDirectionG = 4;
				move(4);
				moveG(4);
				gx = 600;
				gy = 450;
				currentCellXG = 10;
				currentCellYG = 9;
				x = 600;
				y = 550;
				currentCellX = 10;
				currentCellY = 11;
				
				for(int i = 0; i < arrDotX.size(); i++) {
					
					map.get(arrDotY.get(i)).get(arrDotX.get(i)).setDot();
					
				}
				
				map.get(1).get(1).setPowerUp(true);		//PowerUp
				map.get(17).get(1).setPowerUp(true);	//PowerUp
				map.get(1).get(19).setPowerUp(true);	//PowerUp
				map.get(17).get(19).setPowerUp(true);	//PowerUp
				lvl += 1;
			}
		}
	}
	
	public void movement(int direction) {
		if(direction != currentDirection && (x % 50) == 0 && (y % 50) == 0) {	//If we are in middle of cell and have a new direction
			oldDirection = currentDirection;
			currentDirection = newDirection;		//Set the current direction to the new one
		}
		else {
			direction = currentDirection;		//Else keep going in the same direction
		}
			switch(direction) {
			
				case 0: 	// Move right
				
					if(map.get(currentCellY).get(currentCellX + 1).isWall()) {	//If runs into wall
						
						move(4);	//Stop moving
						if(oldDirection != 1) newDirection = oldDirection;
						
					}
					else {
						
						move(0);
						if((x % 50) == 0 && (y % 50) == 0) {
							if((currentCellX + 1) == 20) {
								currentCellX = 1;
								x = 150;
							}
							else {
								currentCellX += 1;
								eaten();
							}
						}
					
					}
			
					break;
					
				case 1: 	// Move left
					
					if(map.get(currentCellY).get(currentCellX - 1).isWall()) {	//If runs into wall
						move(4);	//Stop moving
						if(oldDirection != 0) newDirection = oldDirection;
					}
					else {
						
						move(1);
						if((x % 50) == 0 && (y % 50) == 0) {
							if((currentCellX - 1) == 0) {
								currentCellX = 19;
								x = 1050;
							}
							else {
								currentCellX -= 1;
								eaten();
							}
						}
					
					}
			
					break;
				
				case 2: 	// Move Up
					
					if(map.get(currentCellY - 1).get(currentCellX).isWall()) {	//If runs into wall
						move(4);	//Stop moving
						if(oldDirection != 3) newDirection = oldDirection;
					}
					else {
						
						move(2);
						if((x % 50) == 0 && (y % 50) == 0) {
							currentCellY -= 1;
							eaten();
						}
					
					}
			
					break;
					
				case 3: 	// Move left
					
					if(map.get(currentCellY + 1).get(currentCellX).isWall()) {	//If runs into wall
						move(4);	//Stop moving
						if(oldDirection != 2) newDirection = oldDirection;
					}
					else {
						
						move(3);
						if((x % 50) == 0 && (y % 50) == 0) {
							currentCellY += 1;
							eaten();
						}
					
					}
			
					break;
			
		}
		
	}
	
	public void move(int direct) {
		switch(direct) {
			case 0: x += levels[lvl];
				break;
			case 1: x -= levels[lvl];
				break;
			case 2: y -= levels[lvl];
				break;
			case 3: y += levels[lvl];
				break;
			case 4: x += 0; y += 0;
				break;
			
		}
	}
	
	public void eaten() {
		if(map.get(currentCellY).get(currentCellX).isDot()) {	//If new cell is dot then add to score
			score += 10;
			arrDotX.add(currentCellX);
			arrDotY.add(currentCellY);
			map.get(currentCellY).get(currentCellX).noDot();
			paintImmediately(10, 150, 300, 300);
			
		}
		if(map.get(currentCellY).get(currentCellX).isPowerUp()) {		//If the cell is a powerUp then strengthen pacman
			strong++;
			map.get(currentCellY).get(currentCellX).setPowerUp(false);
			paintImmediately((int)(x - 50),(int)(y - 50), 200, 200);
		}
	}
	
	public void paintComponent(Graphics g) {
		
		Graphics2D g2 = (Graphics2D) g;
		
		super.paintComponent(g2);
		
		//Background
		g2.setColor(Color.BLACK);
		g2.fill(new Rectangle2D.Double(0, 0, 1300, 1000));
		
		//FOOD
		g2.setColor(Color.WHITE);
		for(int i = 0; i < 20; i++) {
			for(int j = 0; j < 21; j++) {
									
				if(map.get(i).get(j).isDot()) {
							
							
					Ellipse2D.Double food = new Ellipse2D.Double(map.get(i).get(j).getCenterX() - 7.5 + 100, map.get(i).get(j).getCenterY() - 7.5, 15, 15);	//Make the small dots
					g2.fill(food);
							
				}
				else if(map.get(i).get(j).isPowerUp()) {
							
					Ellipse2D.Double food = new Ellipse2D.Double(map.get(i).get(j).getCenterX() - 12.5 + 100, map.get(i).get(j).getCenterY() - 12.5, 25, 25);	//Make the PowerUps
					g2.fill(food);
							
				}
						
			}
			
		}
		
		//WALLS
				g2.setColor(Color.blue);
			      
			    g2.draw(new Rectangle2D.Double(500, 450, 250, 100));
			      
			    Rectangle2D.Double r1 = new Rectangle2D.Double(510, 460, 230, 80);
			    g2.draw(r1);
			    RoundRectangle2D.Double r2 = new RoundRectangle2D.Double(500, 600, 250, 50, 25, 25);
			    g2.draw(r2);
		       RoundRectangle2D.Double r3 = new RoundRectangle2D.Double(400, 500, 50, 150, 25, 25);
			    g2.draw(r3);
		       RoundRectangle2D.Double r4 = new RoundRectangle2D.Double(800, 500, 50, 150, 25, 25);
			    g2.draw(r4);
		       RoundRectangle2D.Double r5 = new RoundRectangle2D.Double(400, 250, 50, 200, 25, 25);
			    g2.draw(r5);
		       RoundRectangle2D.Double r6 = new RoundRectangle2D.Double(800, 250, 50, 200, 25, 25);
			    g2.draw(r6);
		       RoundRectangle2D.Double r7 = new RoundRectangle2D.Double(500, 250, 250, 50, 25, 25);
			    g2.draw(r7);
		       RoundRectangle2D.Double r8 = new RoundRectangle2D.Double(600, 300, 50, 100, 25, 25);
			    g2.draw(r8);
		       RoundRectangle2D.Double r9 = new RoundRectangle2D.Double(450, 350, 100, 50, 25, 25);
			    g2.draw(r9);
		       RoundRectangle2D.Double r10 = new RoundRectangle2D.Double(700, 350, 100, 50, 25, 25);
			    g2.draw(r10);
		       RoundRectangle2D.Double r11 = new RoundRectangle2D.Double(400, 100, 150, 100, 25, 25);
			    g2.draw(r11);
		       RoundRectangle2D.Double r12 = new RoundRectangle2D.Double(600, 50, 50, 150, 25, 25);
			    g2.draw(r12);
		       RoundRectangle2D.Double r13 = new RoundRectangle2D.Double(700, 100, 150, 100, 25, 25);
			    g2.draw(r13);
		       RoundRectangle2D.Double r14 = new RoundRectangle2D.Double(200, 100, 150, 100, 25, 25);
			    g2.draw(r14);
		       RoundRectangle2D.Double r15 = new RoundRectangle2D.Double(200, 250, 150, 50, 25, 25);
			    g2.draw(r15);
		       RoundRectangle2D.Double r16 = new RoundRectangle2D.Double(900, 100, 150, 100, 25, 25);
			    g2.draw(r16);
		       RoundRectangle2D.Double r17 = new RoundRectangle2D.Double(900, 250, 150, 50, 25, 25);
			    g2.draw(r17);
		       RoundRectangle2D.Double r18 = new RoundRectangle2D.Double(150, 350, 200, 100, 25, 25);
			    g2.draw(r18);
		       RoundRectangle2D.Double r19 = new RoundRectangle2D.Double(150, 500, 200, 100, 25, 25);
			    g2.draw(r19);
		       RoundRectangle2D.Double r20 = new RoundRectangle2D.Double(900, 350, 200, 100, 25, 25);
			    g2.draw(r20);
		       RoundRectangle2D.Double r21 = new RoundRectangle2D.Double(900, 500, 200, 100, 25, 25);
			    g2.draw(r21);
		       RoundRectangle2D.Double r22 = new RoundRectangle2D.Double(200, 650, 150, 50, 25, 25);
			    g2.draw(r22);
		       RoundRectangle2D.Double r23 = new RoundRectangle2D.Double(200, 750, 150, 100, 25, 25);
			    g2.draw(r23);
		       RoundRectangle2D.Double r24 = new RoundRectangle2D.Double(900, 650, 150, 50, 25, 25);
			    g2.draw(r24);
		       RoundRectangle2D.Double r25 = new RoundRectangle2D.Double(900, 750, 150, 100, 25, 25);
			    g2.draw(r25);
		       RoundRectangle2D.Double r26 = new RoundRectangle2D.Double(600, 650, 50, 100, 25, 25);
			    g2.draw(r26);
		       RoundRectangle2D.Double r27 = new RoundRectangle2D.Double(400, 700, 150, 200, 25, 25);
			    g2.draw(r27);
		       RoundRectangle2D.Double r28 = new RoundRectangle2D.Double(700, 700, 150, 200, 25, 25);
			    g2.draw(r28);
		       RoundRectangle2D.Double r29 = new RoundRectangle2D.Double(550, 800, 150, 100, 25, 25);
			    g2.draw(r29);
		       RoundRectangle2D.Double r30 = new RoundRectangle2D.Double(150, 50, 950, 850, 25, 25);
			    g2.draw(r30);
		       RoundRectangle2D.Double r31 = new RoundRectangle2D.Double(140, 40, 970, 870, 25, 25);
			    g2.draw(r31);
			    g2.drawLine(600, 450, 600, 460);
			    g2.drawLine(650, 450, 650, 460);
		       
		       g2.setColor(Color.black);
		       g2.drawLine(600, 450, 650, 450);
		       g2.drawLine(600, 460, 650, 460);
		       g2.draw(new Rectangle2D.Double(1100, 450, 10, 50));
		       g2.draw(new Rectangle2D.Double(140, 450, 10, 50));
		       
		       g2.setColor(Color.pink);
		       g2.fill(new Rectangle2D.Double(602, 452, 48, 6));
		       
		       g2.setColor(Color.blue);
		       g2.drawLine(140, 450, 160, 450);
		       g2.drawLine(140, 500, 160, 500);
		       g2.drawLine(1090, 450, 1110, 450);
		       g2.drawLine(1090, 500, 1110, 500);
		       
		       //Ghost
				g2.setColor(Color.BLUE);
				Ellipse2D.Double ghost = new Ellipse2D.Double(gx,  gy,  45,  45);
				g2.fill(ghost);
				
				//PACMAN
				Ellipse2D.Double pacman = new Ellipse2D.Double(x, y, 50, 50);
				if((strong % 1000) == 0) {			//If no Powerup then yellow pacman

					g2.setColor(Color.YELLOW);
					
				}
				else if(((strong % 250) <= 15) || (((strong % 1000) > 750) && ((strong % 50) <= 30))) {		//If Powerup almost ran out start to blink
					
					g2.setColor(Color.YELLOW);
					strong++;
					
				}
				else {								//If Powered up then green pacman
					g2.setColor(Color.GREEN);
					strong++;
				}
					
				g2.fill(pacman);
				
				g2.setColor(Color.blue);
	    
	    //TEXT
	    Font currentFont = g.getFont();
	    Font newFont = currentFont.deriveFont(currentFont.getSize() * 3F);
	    g.setFont(newFont);
	    g2.drawString("Player 1", 10, 100);
	    g2.drawString("Player 2", 1150, 100);
	    g2.drawString("Score:", 25, 150);
	    g2.drawString("Score:", 1175, 150);
	    g2.drawString(Integer.toString(score), 40 + (1150 * game), 200);
	    if(game == 1) {
	    	
	    	g2.drawString(Integer.toString(player1), 40, 200);
	    	
	    }
	    
	    
	    
	    g2.drawString("LIVES:", 20, 700);
	    g2.drawString("LIVES:", 1170, 700);
	    
	    g2.setColor(Color.yellow);
	    if(numLives >= 1) {
	    	g2.fill(new Ellipse2D.Double(60 + (1150 * game), 850, 50, 50));
	    }
	    if(numLives == 2) {
	    	g2.fill(new Ellipse2D.Double(60 + (1150 * game), 750, 50, 50));
	    }
		
		switch(winner) {
    	case 0: 
    			g2.setColor(Color.BLACK);
    			g2.fill(new Rectangle2D.Double(0, 0, 1500, 1000));
    			g2.setColor(Color.blue);
    			newFont = currentFont.deriveFont(currentFont.getSize() * 10F);
    			g2.drawString("Tie Game!!", 700, 400);
    		break;
    	case 1: 
				g2.setColor(Color.BLACK);
				g2.fill(new Rectangle2D.Double(0, 0, 1500, 1000));
				g2.setColor(Color.blue);
				newFont = currentFont.deriveFont(currentFont.getSize() * 10F);
				g2.drawString("Player 1 Wins!!", 700, 400);
			break;
    	case 2: 
				g2.setColor(Color.BLACK);
				g2.fill(new Rectangle2D.Double(0, 0, 1500, 1000));
				g2.setColor(Color.blue);
				newFont = currentFont.deriveFont(currentFont.getSize() * 10F);
				g2.drawString("Player 2 Wins!!", 700, 400);
			break;
		}
		/*
		g2.setColor(Color.CYAN);
	    g2.drawString("Count: " + count, 100, 100);
	    g2.drawString("newDirection: " + newDirection, 100, 200);
	    g2.drawString("CellX: " + currentCellX, 100, 500);
	    g2.drawString("CellY: " + currentCellY, 100, 700);
		*/
		
	}
	
	public void paint(Graphics g) {
		
		dbImage = createImage(getWidth(), getHeight());
		dbg = dbImage.getGraphics();
		paintComponent(dbg);
		g.drawImage( dbImage, 0, 0, this); 
	   
	}
	
	public void keyPressed(KeyEvent e) {
	    int code = e.getKeyCode();
	    if(code == KeyEvent.VK_UP){
	    	newDirection = 2;
	    }
	    if(code == KeyEvent.VK_DOWN){
	    	
	    	newDirection = 3;
	       
	    }
	    if(code == KeyEvent.VK_RIGHT){
	    	newDirection = 0;
	    }
	    if(code == KeyEvent.VK_LEFT){
	    	newDirection = 1;
	    }
	    if(code == KeyEvent.VK_W){
	    	newDirectionG = 2;
	    }
	    if(code == KeyEvent.VK_S){
	    	newDirectionG = 3;
	    }
	    if(code == KeyEvent.VK_D){
	    	newDirectionG = 0;
	    }
	    if(code == KeyEvent.VK_A){
	    	newDirectionG = 1;
	    }
	}
		   
	
	public PacManUpdate() {
		
		t.start();
		addKeyListener(this);
	    setFocusable(true);
	    setFocusTraversalKeysEnabled(false);
	    for(int i = 0; i < 21; i++) {
			
			map.add(new ArrayList<PacManCell>());
						
		}
		
		for(int i = 0; i < 20; i++) {
			for(int j = 0; j < 21; j++) {
				
				map.get(i).add(new PacManCell(j * 50, i * 50));		//Initiallize the Cells
				if(map.get(i).get(j).getCenterX() == x - 75 && map.get(i).get(j).getCenterY() == y + 25) {
					currentCellX = j;
					currentCellY = i;
				}
				if(map.get(i).get(j).getCenterX() == gx - 75 && map.get(i).get(j).getCenterY() == gy + 25) {
					currentCellXG = j;
					currentCellYG = i;
				}
				if(i == 18  || i == 19 || j == 20 || j == 0 || i == 0) {
					map.get(i).get(j).setWall();
				}
			
			}
			
		}
		map.get(9).get(0).noWall();			//NO WALL
		map.get(9).get(20).noWall();		//NO WALL	
		
		map.get(12).get(8).setWall();		//WALL
		map.get(12).get(9).setWall();		//WALL
		map.get(12).get(10).setWall();		//WALL
		map.get(12).get(11).setWall();		//WALL
		map.get(5).get(6).setWall();    //WALL
      map.get(6).get(6).setWall();    //WALL
      map.get(7).get(6).setWall();    //WALL
      map.get(8).get(6).setWall();    //WALL
      map.get(10).get(6).setWall();    //WALL
      map.get(11).get(6).setWall();    //WALL
      map.get(12).get(6).setWall();    //WALL
      map.get(5).get(8).setWall();    //WALL
      map.get(5).get(9).setWall();    //WALL
      map.get(5).get(10).setWall();    //WALL
      map.get(5).get(11).setWall();    //WALL
      map.get(7).get(12).setWall();    //WALL
      map.get(5).get(14).setWall();    //WALL
      map.get(7).get(13).setWall();    //WALL
      map.get(7).get(7).setWall();    //WALL
      map.get(7).get(8).setWall();    //WALL
      map.get(6).get(10).setWall();    //WALL
      map.get(7).get(10).setWall();    //WALL
      map.get(9).get(8).setWall();    //WALL
      map.get(10).get(8).setWall();    //WALL
      map.get(9).get(9).setWall();    //WALL
      map.get(10).get(9).setWall();    //WALL  
      map.get(10).get(10).setWall();    //WALL
      map.get(9).get(11).setWall();    //WALL
      map.get(10).get(11).setWall();    //WALL
      map.get(6).get(14).setWall();    //WALL
      map.get(7).get(14).setWall();    //WALL
      map.get(8).get(14).setWall();    //WALL
      map.get(10).get(14).setWall();    //WALL
      map.get(11).get(14).setWall();    //WALL
      map.get(12).get(14).setWall();    //WALL
      map.get(5).get(12).setWall();    //WALL
      map.get(2).get(2).setWall();    //WALL
      map.get(3).get(2).setWall();    //WALL
      map.get(5).get(2).setWall();    //WALL
      map.get(7).get(2).setWall();    //WALL
      map.get(8).get(2).setWall();    //WALL
      map.get(10).get(2).setWall();    //WALL
      map.get(11).get(2).setWall();    //WALL
      map.get(2).get(3).setWall();    //WALL
      map.get(3).get(3).setWall();    //WALL
      map.get(5).get(3).setWall();    //WALL
      map.get(7).get(3).setWall();    //WALL
      map.get(8).get(3).setWall();    //WALL
      map.get(10).get(3).setWall();    //WALL
      map.get(11).get(3).setWall();    //WALL
      map.get(2).get(4).setWall();    //WALL
      map.get(3).get(4).setWall();    //WALL
      map.get(5).get(4).setWall();    //WALL
      map.get(7).get(4).setWall();    //WALL
      map.get(8).get(4).setWall();    //WALL
      map.get(10).get(4).setWall();    //WALL
      map.get(11).get(4).setWall();    //WALL
      map.get(2).get(16).setWall();    //WALL
      map.get(3).get(16).setWall();    //WALL
      map.get(5).get(16).setWall();    //WALL
      map.get(7).get(16).setWall();    //WALL
      map.get(8).get(16).setWall();    //WALL
      map.get(10).get(16).setWall();    //WALL
      map.get(11).get(16).setWall();    //WALL
      map.get(2).get(17).setWall();    //WALL
      map.get(3).get(17).setWall();    //WALL
      map.get(5).get(17).setWall();    //WALL
      map.get(7).get(17).setWall();    //WALL
      map.get(8).get(17).setWall();    //WALL
      map.get(10).get(17).setWall();    //WALL
      map.get(11).get(17).setWall();    //WALL
      map.get(2).get(18).setWall();    //WALL
      map.get(3).get(18).setWall();    //WALL
      map.get(5).get(18).setWall();    //WALL
      map.get(7).get(18).setWall();    //WALL
      map.get(8).get(18).setWall();    //WALL
      map.get(10).get(18).setWall();    //WALL
      map.get(11).get(18).setWall();    //WALL
      map.get(7).get(1).setWall();    //WALL
      map.get(8).get(1).setWall();    //WALL
      map.get(10).get(1).setWall();    //WALL
      map.get(11).get(1).setWall();    //WALL
      map.get(7).get(19).setWall();    //WALL
      map.get(8).get(19).setWall();    //WALL
      map.get(10).get(19).setWall();    //WALL
      map.get(11).get(19).setWall();    //WALL
      map.get(2).get(6).setWall();    //WALL
      map.get(3).get(6).setWall();    //WALL
      map.get(2).get(7).setWall();    //WALL
      map.get(3).get(7).setWall();    //WALL
      map.get(2).get(8).setWall();    //WALL
      map.get(3).get(8).setWall();    //WALL
      map.get(2).get(12).setWall();    //WALL
      map.get(3).get(12).setWall();    //WALL
      map.get(2).get(13).setWall();    //WALL
      map.get(3).get(13).setWall();    //WALL
      map.get(2).get(14).setWall();    //WALL
      map.get(3).get(14).setWall();    //WALL
      map.get(1).get(10).setWall();    //WALL
      map.get(2).get(10).setWall();    //WALL
      map.get(3).get(10).setWall();    //WALL
      map.get(14).get(6).setWall();    //WALL
      map.get(14).get(7).setWall();    //WALL
      map.get(14).get(8).setWall();    //WALL
      map.get(14).get(12).setWall();    //WALL
      map.get(14).get(13).setWall();    //WALL
      map.get(14).get(14).setWall();    //WALL
      map.get(15).get(6).setWall();    //WALL
      map.get(15).get(7).setWall();    //WALL
      map.get(15).get(8).setWall();    //WALL
      map.get(15).get(12).setWall();    //WALL
      map.get(15).get(13).setWall();    //WALL
      map.get(15).get(14).setWall();    //WALL
      map.get(16).get(6).setWall();    //WALL
      map.get(16).get(7).setWall();    //WALL
      map.get(16).get(8).setWall();    //WALL
      map.get(16).get(12).setWall();    //WALL
      map.get(16).get(13).setWall();    //WALL
      map.get(16).get(14).setWall();    //WALL
      map.get(17).get(6).setWall();    //WALL
      map.get(17).get(7).setWall();    //WALL
      map.get(17).get(8).setWall();    //WALL
      map.get(17).get(12).setWall();    //WALL
      map.get(17).get(13).setWall();    //WALL
      map.get(17).get(14).setWall();    //WALL
      map.get(13).get(10).setWall();    //WALL
      map.get(14).get(10).setWall();    //WALL
      map.get(16).get(9).setWall();    //WALL
      map.get(17).get(9).setWall();    //WALL
      map.get(16).get(10).setWall();    //WALL
      map.get(17).get(10).setWall();    //WALL
      map.get(16).get(11).setWall();    //WALL
      map.get(17).get(11).setWall();    //WALL
      map.get(9).get(12).setWall();		//Wall
      map.get(10).get(12).setWall();	//Wall
      map.get(13).get(4).setWall();		//Wall
      map.get(13).get(16).setWall();	//Wall
      map.get(13).get(17).setWall();	//Wall
      map.get(13).get(18).setWall();	//Wall
      map.get(15).get(2).setWall();		//Wall
      map.get(15).get(3).setWall();		//Wall
      map.get(15).get(4).setWall();		//Wall
      map.get(16).get(2).setWall();		//Wall
      map.get(16).get(3).setWall();		//Wall
      map.get(16).get(4).setWall();		//Wall
      map.get(15).get(16).setWall();	//Wall
      map.get(15).get(17).setWall();	//Wall
      map.get(15).get(18).setWall();	//Wall
      map.get(16).get(16).setWall();	//Wall
      map.get(16).get(17).setWall();	//Wall
      map.get(16).get(18).setWall();	//Wall
      map.get(12).get(12).setWall();	//Wall
      map.get(13).get(2).setWall();		//Wall
      map.get(13).get(3).setWall();		//Wall
      
      //No Dot Spaces
      map.get(10).get(13).noDot();    
      map.get(11).get(13).noDot();    
      map.get(12).get(13).noDot();    
      map.get(9).get(10).noDot(); 
      map.get(8).get(13).noDot();
      map.get(8).get(7).noDot();
      map.get(9).get(7).noDot();	
      map.get(10).get(7).noDot();	
      map.get(11).get(7).noDot();	
      map.get(11).get(8).noDot();	
      map.get(11).get(9).noDot();	
      map.get(11).get(10).noDot();	
      map.get(11).get(11).noDot();	
      map.get(11).get(12).noDot();	
      map.get(8).get(8).noDot();	
      map.get(8).get(9).noDot();	
      map.get(8).get(10).noDot();	
      map.get(8).get(11).noDot();	
      map.get(8).get(12).noDot();	   
      map.get(9).get(6).noDot();	
      map.get(9).get(13).noDot();	
      map.get(12).get(7).noDot();	
      map.get(9).get(14).noDot();
      map.get(9).get(1).noDot();
      map.get(9).get(2).noDot();
      map.get(9).get(3).noDot();
      map.get(9).get(4).noDot();
      map.get(9).get(16).noDot();
      map.get(9).get(17).noDot();
      map.get(9).get(18).noDot();
      map.get(9).get(19).noDot();
      
      
      
      map.get(1).get(1).setPowerUp(true);		//PowerUp
		map.get(17).get(1).setPowerUp(true);	//PowerUp
		map.get(1).get(19).setPowerUp(true);	//PowerUp
		map.get(17).get(19).setPowerUp(true);	//PowerUp


	}
	
	public void movementG(int direction) {
		if(direction != currentDirectionG && (gx % 50) == 0 && (gy % 50) == 0) {	//If we are in middle of cell and have a new direction
			oldDirectionG = currentDirectionG;
			currentDirectionG = newDirectionG;		//Set the current direction to the new one
		}
		else {
			direction = currentDirectionG;		//Else keep going in the same direction
		}
			switch(direction) {
			
				case 0: 	// Move right
				
					if(map.get(currentCellYG).get(currentCellXG + 1).isWall()) {	//If runs into wall
						moveG(4);	//Stop moving
						if(oldDirectionG != 1) newDirectionG = oldDirectionG;
					}
					else {
						
						moveG(0);
						if((gx % 50) == 0 && (gy % 50) == 0) {
							if((currentCellXG + 1) == 19) {
								currentCellXG = 1;
								gx = 150;
							}
							else {
								currentCellXG += 1;
							}
						}
					
					}
			
					break;
					
				case 1: 	// Move left
					
					if(map.get(currentCellYG).get(currentCellXG - 1).isWall()) {	//If runs into wall
						moveG(4);	//Stop moving
						if(oldDirectionG != 0) newDirectionG = oldDirectionG;
					}
					else {
						
						moveG(1);
						if((gx % 50) == 0 && (gy % 50) == 0) {
							if((currentCellXG - 1) == 0) {
								currentCellXG = 19;
								gx = 1050;
							}
							else {
								currentCellXG -= 1;
							}
						}
					
					}
			
					break;
				
				case 2: 	// Move Up
					
					if(map.get(currentCellYG - 1).get(currentCellXG).isWall()) {	//If runs into wall
						moveG(4);	//Stop moving
						if(oldDirectionG != 3) newDirectionG = oldDirectionG;
					}
					else {
						
						moveG(2);
						if((gx % 50) == 0 && (gy % 50) == 0) {
							currentCellYG -= 1;
						}
					
					}
			
					break;
					
				case 3: 	// Move left
					
					if(map.get(currentCellYG + 1).get(currentCellXG).isWall()) {	//If runs into wall
						moveG(4);	//Stop moving
						if(oldDirectionG != 2) newDirectionG = oldDirectionG;
					}
					else {
						
						moveG(3);
						if((gx % 50) == 0 && (gy % 50) == 0) {
							currentCellYG += 1;
						}
					
					}
			
					break;
			}
	}
	
	public void moveG(int direct) {
		switch(direct) {
			case 0: gx += level[lvl];
				break;
			case 1: gx -= level[lvl];
				break;
			case 2: gy -= level[lvl];
				break;
			case 3: gy += level[lvl];
				break;
			case 4: gx += 0; gy += 0;
		}
	}
	

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}


}
