import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import javafx.scene.shape.Circle;
import java.awt.geom.Ellipse2D;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.awt.Robot;
import java.awt.AWTException;
import java.awt.Image;
import java.awt.geom.RoundRectangle2D;

public class PacMan extends JPanel implements ActionListener, KeyListener {
   
   Timer t = new Timer(5, this);
   double x = 475, y = 565, velx = 0, vely = 0;
   boolean wall = false, normal = true;
   int count = 0;
   private Image dbImage;
   private Graphics dbg;
   
   public PacMan(){
      t.start();
      addKeyListener(this);
      setFocusable(true);
      setFocusTraversalKeysEnabled(false);
   }
   
   public void paintComponent(Graphics g){
   
      Graphics2D g2 = (Graphics2D) g;

      super.paintComponent(g);
      
      //Black Background
      g2.setColor(Color.BLACK);
      g2.fill(new Rectangle2D.Double(0, 0, 1000, 1000));
      
      //All White Food
      g2.setColor(Color.white);
      
      Ellipse2D.Double powerUp = new Ellipse2D.Double(140, 95, 25, 25);
      g2.fill(powerUp);
      g2.fill(new Ellipse2D.Double(100, 100, 15, 15));
      
      //PACMAN      
      Ellipse2D.Double pacman = new Ellipse2D.Double(x, y, 40, 40);
      if(normal) {
         g2.setColor(Color.yellow);
         
      }
      else {
         
         g2.setColor(Color.green);
         count++;
         if(count == 700) normal = true;    //Only power up pacman for a few seconds
   
      }
      
      g2.fill(pacman);
      
      //All Black Wall Fillers
      
      
      //All Blue Walls
      g2.setColor(Color.blue);
      
      g2.draw(new Rectangle2D.Double(400, 450, 200, 100));
      
      Rectangle2D.Double r1 = new Rectangle2D.Double(390, 440, 220, 120);
      g2.draw(r1);
      RoundRectangle2D.Double r2 = new RoundRectangle2D.Double(390, 610, 220, 25, 25, 25);
      g2.draw(r2);
      RoundRectangle2D.Double r3 = new RoundRectangle2D.Double(390, 290, 220, 25, 25, 25);
      g2.draw(r3);
      RoundRectangle2D.Double r4 = new RoundRectangle2D.Double(487.5, 290, 25, 100, 25, 25);
      g2.draw(r4);
      g2.setColor(Color.black);
      Ellipse2D.Double f1 = new Ellipse2D.Double(487.5, 290, 25, 25);
      g2.setColor(Color.blue);
      g2.drawLine(475, 450, 475, 440);
      g2.drawLine(525, 450, 525, 440);
            
      //Pink Rectangle
      g2.setColor(Color.pink);
      
      g2.fill(new Rectangle2D.Double(477, 442, 48, 6));
            
      //OTHER BLACK
      g2.setColor(Color.black);
      g2.drawLine(475, 450, 525, 450);
      g2.drawLine(475, 440, 525, 440);
      
      //STATUS AILMENTS
      if(pacman.intersects(r1) || r2.intersects(pacman.getMinX(), pacman.getMinY(), 40, 40)) wall = true;    //Make sure Pac hasnt intersected rectangle
      if(r3.intersects(pacman.getMinX(), pacman.getMinY(), 50, 50) || r4.intersects(pacman.getMinX(), pacman.getMinY(), 50, 50)) wall = true;
      
      if(pacman.contains(powerUp.getCenterX(), powerUp.getCenterY())) {    //Power up Pacman
      
         g2.fill(powerUp);
         normal = false;
      
      }
   }
   /*          //Should make it run smoother
   public void paint(Graphics g) {
   
      dbImage = createImage(getWidth(), getHeight());
      dbg = dbImage.getGraphics();
      paintComponent(dbg);
      g.drawImage( dbImage, 0, 0, this); 
   
   }
   */
   public void actionPerformed(ActionEvent e) {
      repaint();
      
      if(!wall) {
      
         x += velx;
         y += vely;
         
      }
      else{
      
         x -= velx;     //If Pac is at a wall, return him to outside of wall
         y -= vely;     
         velx = 0;      //And set velocity to zero
         vely = 0;
         wall = false;
      
      }
    
   }
   
   public void up() {
      vely = -2.5;
      velx = 0;
   } 
   
   public void down() {
      vely = 2.5;
      velx = 0;
   } 
   
   public void left() {
      vely = 0;
      velx = -2.5;
   }
   
   public void right() {
      vely = 0;
      velx = 2.5;
   }
   
   public void keyPressed(KeyEvent e) {
      int code = e.getKeyCode();
      if(code == KeyEvent.VK_UP){
         up();
      }
      if(code == KeyEvent.VK_DOWN){
         down();
      }
      if(code == KeyEvent.VK_RIGHT){
         right();
      }
      if(code == KeyEvent.VK_LEFT){
         left();
      }
   }
   
   public void keyReleased(KeyEvent event) {
   }
   public void keyTyped(KeyEvent event) {
   }
   
}
